Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки 


Кафедра програмної інженерії
 


Звіт
з практичної роботи №1
з дисципліни «Скриптові мови програмування»






Виконав:                                                           	     Перевірив:
ст. гр. ПЗПІ-23-3                                    	       	     ст. викл. Сокорчук І. П.
Горщарук Н. С.







Харків 2025
1 ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень112.03.20250.1Оформлено повністю текстовий звіт211.05.20250.2Частково оформлено звіт відповідно до вимог324.05.20250.3Остаточно оформлено звіт відповідно до вимог, додано відео

2 ЗАВДАННЯ
     - Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
     - Ялинка повинна бути симетричною.
     - Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#»
     - Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
     - Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
     - Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску.
     - Параметри скрипта повинні мати додатнє значення.
     - Вказані значення повинні округлятися до потрібних у меншу сторону.
     - Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у                батьківський процес.
     - У скрипті потрібно обовʼязково використати конструкції, наведені нижче.
if ... then ... fi
while ... do ... done
until ... do ... done
for ... in .. do ... done
for ((...)); do ... done
- У скрипті також потрібно використати функцію.

3 ОПИС ВИКОНАНОЇ РОБОТИ
     - Було розроблено Bash-скрипт із дотриманням умов практичного завдання.
     - Реалізовано функцію для побудови одного ярусу гілок. 
     - Побудова ярусу виконувалась із використанням циклу for та розрахунку пробілів і символів.
     - Для повної побудови ялинки використовувались цикли: for, while, until. 
     - Реалізовано перевірку аргументів з умовним блоком if. Обробка помилкових випадків виводить повідомлення у stderr. 
     - Реалізовано чергування символів * та # у рядках. 
     - Забезпечено обмеження максимальної ширини ярусів відносно ширини снігу. 
     - Додано стовбур та шар снігу з фіксованою висотою та шириною.
     - Результати роботи подано у вигляді рисунків Б1-Б6.

4 ВИСНОВКИ
     - У результаті виконання практичної роботи було створено Bash-скрипт, що будує симетричну ялинку.
     - Отримано практичні навички використання конструкцій умов (if) та циклів (for, while, until).
     - Реалізовано перевірку параметрів командного рядка, ключів довідки та версії.
     - Побудовано універсальний скрипт з функцією, перевірками та правильним формуванням виводу.
     - Обробка помилок реалізована через stderr із відповідними кодами завершення.
     - Реалізоване рішення відповідає вимогам завдання.
     - Забезпечено коректну роботу з файловими правами та безпекою скрипта.








ДОДАТОК А
Відеозапис
     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/-u5FtyGmbDc

Хронологічний опис відеозапису:
00:00 — Вступ та опис завдання.
00:18 — Початок пояснення коду починаючи з функцій показ допомоги, показ версії та перевірки аргументів зі збереженням у відповідні змінні.
04:35 — Пояснення функції для побудови ярусів гілок ялинки та виклик цієї функції.
10:45 — Пояснення побудови стовбура та шару снігу.
12:25 — Тестування скрипта.







ДОДАТОК Б
Графічні матеріали

Рисунок Б.1 — Використання без аргументів


Рисунок Б.2 — Використання команди –help


Рисунок Б.3 — Використання команди –version


Рисунок Б.4 — Недостатій розмір для ялинки


Рисунок Б.5 — Попередження про різні значення


Рисунок Б.6 — Правильний результат ялинки

ДОДАТОК В
Програмний код
   В.1 Головний скрипт на bash
   GitHub репозиторій: https://github.com/NureHorshcharukNikita/smp-pzpi-23-3-horshcharuk-nikita/blob/main/Pract1/smp-pzpi-23-3-horshcharuk-nikita-pract1/smp-pzpi-23-3-horshcharuk-nikita-pract1-code
      1 #!/bin/bash
      2
      3 function show_help()
      4 {
      5     echo "Використовуйте: $0 [--help | --version] | [висота_ялинки ширина_снігу]"
      6 }
      7
      8 function show_version()
      9 {
     10     echo "Програма $0, версія 0.1"
     11 }
     12
     13 if [[ "$1" == "--help" ]]; then
     14     show_help
     15     exit 0
     16 elif [[ "$1" == "--version" ]]; then
     17     show_version
     18     exit 0
     19 fi
     20
     21 if [ "$#" -ne 2 ]; then
     22     show_help
     23     exit 1
     24 fi
     25
     26 half_height=$(( $1 / 2 ))
     27 tree_height=$(( half_height * 2 ))
     28
     29 snow_width=$2
     30 if (( snow_width % 2 == 0 )); then
     31     snow_width=$(( snow_width - 1 ))
     32 fi
     33
     34 if [ "$tree_height" -le 0 ] || [ "$snow_width" -le 0 ]; then
     35     echo "Аргументи повинні бути додатними числами!" >&2
     36     exit 1
     37 fi
     38
     39 if [ "$tree_height" -lt 8 ] || [ "$snow_width" -lt 7 ]; then
     40     echo 'Недостатні розміри для побудови ялинки' >&2
     41     exit 1
     42 fi
     43
     44 if (( tree_height - 1 != snow_width )); then
     45     echo "висота_ялинки занадто велика для заданої ширини снігу ($snow_width)" >&2
     46     echo 'ширина ярусів має бути на 2 менша за ширину снігу' >&2
     47     exit 1
     48 fi
     49
     50 symbol='*'
     51 function draw_branches()
     52 {
     53   local height=$1
     54   local current_width=$2
     55
     56   local counter=1
     57   until [ "$counter" -ge "$height" ]; do
     58    spaces=$(( (snow_width - current_width) / 2 ))
     59    printf "%*s" "$spaces" ''
     60    for (( i = 0; i < current_width; i++ )); do
     61     printf "%s" "$symbol"
     62    done
     63    echo ''
     64    current_width=$(( current_width + 2 ))
     65    (( counter++ ))
     66    symbol=$([ "$symbol" = '*' ] && echo '#' || echo '*')
     67   done
     68 }
     69
     70 #draw branches
     71 draw_branches "$half_height" 1
     72 draw_branches $(( half_height - 1 )) 3
     73
     74 spaces=$(( (snow_width - 3) / 2 ))
     75 for i in 1 2; do
     76  printf "%*s" "$spaces" ''
     77  printf "%s\n" '###'
     78 done
     79
     80 counter=1
     81 while [ "$counter" -le "$snow_width" ]; do
     82  printf "%s" '*'
     83  (( counter++ ))
     84 done
     85
     86 echo ''
    
2


