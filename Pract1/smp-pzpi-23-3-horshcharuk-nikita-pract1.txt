Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії

ЗВІТ
з практичної роботи № 1
з дисципліни «Скриптові мови програмування»

Виконав
ст. гр. ПЗПІ-23-3
Горщарук Нікіта

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович

Харків 2025

Практична робота №1
  1 Умови задачі
  - Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
  - Ялинка повинна бути симетричною.
  - Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#»
  - Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
  - Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
  - Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску.
  - Параметри скрипта повинні мати додатнє значення.
  - Вказані значення повинні округлятися до потрібних у меншу сторону.
  - Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у                батьківський процес.
  - У скрипті потрібно обовʼязково використати конструкції, наведені нижче.
    if ... then ... fi
    while ... do ... done
    until ... do ... done
    for ... in .. do ... done
    for ((...)); do ... done
  - У скрипті також потрібно використати функцію.

  2 Хід роботи
  - Було розроблено Bash-скрипт із дотриманням умов практичного завдання. 
  - Реалізовано функцію для побудови одного ярусу гілок. 
  - Побудова ярусу виконувалась із використанням циклу for та розрахунку пробілів і символів. 
  - Для повної побудови ялинки використовувались цикли: for, while, until. 
  - Реалізовано перевірку аргументів з умовним блоком if. Обробка помилкових випадків виводить повідомлення у stderr. 
  - Реалізовано чергування символів * та # у рядках. 
  - Забезпечено обмеження максимальної ширини ярусів відносно ширини снігу. 
  - Додано стовбур та шар снігу з фіксованою висотою та шириною.

  Висновок: У результаті виконання лабораторної роботи було створено Bash-скрипт, який динамічно будує симетричну ялинку на основі заданих параметрів висоти та ширини. Було отримано практичні навички використання конструкцій умов (if), циклів (for, while, until), обробки помилок та роботи з параметрами командного рядка. Реалізоване рішення відповідає вимогам завдання та демонструє коректну роботу з файловими правами та валідацією вхідних даних.

  ДОДАТОК А
  #!/bin/bash
  
  function show_help()
  {
      echo "Використовуйте: $0 [--help | --version] | [висота_ялинки ширина_снігу]"
  }
  
  function show_version()
  {
  	echo "Програма $0, версія 0.1"
  }
  
  if [[ "$1" == "--help" ]]; then
      show_help
      exit 0
  elif [[ "$1" == "--version" ]]; then
      show_version
      exit 0
  fi
  
  if [ "$#" -ne 2 ]; then
      show_help
      exit 1
  fi
  
  half_height=$(( $1 / 2 ))
  tree_height=$(( half_height * 2 ))
  
  snow_width=$2
  if (( snow_width % 2 == 0 )); then
      snow_width=$(( snow_width - 1 ))
  fi
  
  if [ "$tree_height" -le 0 ] || [ "$snow_width" -le 0 ]; then
      echo "Аргументи повинні бути додатними числами!" >&2
      exit 1
  fi
  
  if [ "$tree_height" -lt 8 ] || [ "$snow_width" -lt 7 ]; then
      echo 'Недостатні розміри для побудови ялинки' >&2
      exit 1
  fi
  
  if (( tree_height - 1 != snow_width )); then
      echo "висота_ялинки занадто велика для заданої ширини снігу ($snow_width)" >&2
      echo 'ширина ярусів має бути на 2 менша за ширину снігу' >&2
      exit 1
  fi
  
  symbol='*'
  function draw_branches()
  {
    local height=$1
    local current_width=$2
  
    local counter=1
    until [ "$counter" -ge "$height" ]; do
     spaces=$(( (snow_width - current_width) / 2 ))
     printf "%*s" "$spaces" ''
     for (( i = 0; i < current_width; i++ )); do
      printf "%s" "$symbol"
     done
     echo ''
     current_width=$(( current_width + 2 ))
     (( counter++ ))
     symbol=$([ "$symbol" = '*' ] && echo '#' || echo '*')
    done
  }
  
  #draw branches
  draw_branches "$half_height" 1
  draw_branches $(( half_height - 1 )) 3
  
  spaces=$(( (snow_width - 3) / 2 ))
  for i in 1 2; do
   printf "%*s" "$spaces" ''
   printf "%s\n" '###'
  done
  
  counter=1
  while [ "$counter" -le "$snow_width" ]; do
   printf "%s" '*'
   (( counter++ ))
  done
  
  echo ''
