Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки 


Кафедра програмної інженерії
 


Звіт
з лабораторної роботи № 1
з дисципліни «Скриптові мови програмування»






Виконав:                                                           	     Перевірив:
ст. гр. ПЗПІ-23-3                                    	       	     ст. викл. Сокорчук І. П.
Горщарук Н. С.







Харків 2025
1 ІСТОРІЯ ЗМІН
№ДатаВерсія звітуОпис змін та виправлень129.03.20250.1Оформлено повністю текстовий звіт211.05.20250.2Частково оформлено звіт відповідно до вимог324.05.20250.3Остаточно оформлено звіт відповідно до вимог, додано відео

2 ЗАВДАННЯ
     - Розробити Bash-скрипт для перетворення CSV-файлу розкладу занять, експортованого із сайту cist.nure.ua, у формат, придатний для імпорту в Google Календар.
     - Реалізувати підтримку параметрів виклику: --help, --version, -q / --quiet.
     - Якщо параметри не вказані, надати користувачу меню вибору файлу та академічної групи через команду select.
     - Забезпечити конвертацію файлу у кодуванні UTF-8 (за допомогою iconv).
     - Створити механізм фільтрації та сортування списку груп та файлів (через ls, sort, uniq).
     - Вибрані записи повинні бути переформатовані у CSV-структуру Google Календаря: Subject, Start Date, Start Time, End Date, End Time, Description.
     - Заняттям автоматично присвоюється порядковий номер, окремо для лабораторних (які рахуються як два).
     - У полі Subject має бути видалено назву групи та додано номер заняття.
     - Перетворення дати та часу у формат Google Календаря з 12-годинною системою AM/PM.
     - Вивід результату у файл Google_TimeTable_??_??_20??.csv та (за потреби) у консоль.
     - Вивід повідомлень про помилки у stderr із відповідним кодом завершення.
     - Забезпечити виконання скрипта усіма користувачами з правом редагування лише для власника.
     - Обов'язково використати команди: select, ls, awk, sort, uniq, tee, cat, sed, iconv.

3 ОПИС ВИКОНАНОЇ РОБОТИ
     - Створено Bash-скрипт, що обробляє CSV-файл розкладу занять для однієї або декількох академічних груп.
     - Реалізовано логіку обробки параметрів командного рядка (--help, --version, --quiet).
     - У випадку відсутності аргументів, скрипт формує меню вибору файлу за шаблоном TimeTable_??_??_20??.csv та групи з цього файлу.
     - Застосовано iconv для перетворення кодування Windows-1251 у UTF-8 та обробку символів переносу рядка.
     - Дані сортуються за алфавітом і датою, групи — унікалізуються через sort та uniq.
     - Здійснюється перевірка доступності файлу та наявності групи у ньому, обробка помилок реалізована через stderr.
     - За допомогою awk виділено поля, переформатовано дату та час, створено Subject з номером заняття.
     - Додатково враховано особливості лабораторних занять — для них номер збільшується лише кожні два записи.
     - Готові результати експортуються у новий файл Google_TimeTable_??_??_20??.csv.
     - Реалізовано вивід результатів через tee (у файл і консоль) або лише у файл (режим quiet).
     - Права скрипта встановлено як виконувані для всіх, редагування дозволено лише власнику.
     - Результати роботи подано у вигляді рисунків Б1-Б6.

4 ВИСНОВКИ
     - У результаті виконання лабораторної роботи було створено Bash-скрипт для трансформації розкладу занять у формат Google Календаря. 
     - Отримано навички обробки CSV-даних, використання утиліт Bash (awk, sed, iconv, tee, sort, uniq). 
     - Реалізовано інтерактивний інтерфейс вибору файлів та груп. 
     - Забезпечено повну відповідність формату Google Календаря та підтримку 12-годинного формату часу. 
     - Скрипт підтримує обробку помилок та коректне завершення з відповідними кодами. 
     - Рішення відповідає технічним та функціональним вимогам лабораторної роботи.








ДОДАТОК А
Відеозапис
     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/mokiCVneuMU

Хронологічний опис відеозапису:
00:00 — Вступ та опис завдання.
00:20 — Початок пояснення коду починаючи з функцій показ допомоги, показ версії та перевірки аргументів.
00:55 — Пояснення про тихий режим.
01:10 — Пояснення перевірок та select для назви файлу.
02:38 — Пояснення про початкове форматування файлу у вигляді конвертація кодування, заміни \r на \n, вивід починаючи з 2 строки та сортування за назвою, датою, часом.
03:30 — Пояснення отримання, перевірок, grep та select для назви академічної групи.
06:00 — Пояснення головного awk скрипта для обробки файлу який записаний в зміну.
09:40 — Пояснення виконання awk використовуючи зміну скрипта та тихий режим.
10:15 — Пояснення про результат виконання скрипта використовуючи $?.
10:35 — Тестування скрипта.



ДОДАТОК Б
Графічні матеріали

Рисунок Б.1 — Використання без аргументів, відображається список всіх відповідних файлів


Рисунок Б.2 — Обрано файл під номером 1


Рисунок Б.3 — Обрано 3 групу та згенерувало без тихого режиму


Рисунок Б.4 — Обрано перший файл 2 група в тихому режимі


Рисунок Б.5 — Обрано файл під номером 3 (з однією групою)


Рисунок Б.6 — В тихому режимі з використанням аргументів


ДОДАТОК В
Програмний код
   В.1 Головний скрипт на bash з awk
   GitHub репозиторій: https://github.com/NureHorshcharukNikita/smp-pzpi-23-3-horshcharuk-nikita/blob/main/Lab1/smp-pzpi-23-3-horshcharuk-nikita-lab1/smp-pzpi-23-3-horshcharuk-nikita-lab1-code
      1 #!/bin/bash
      2
      3 USER_NAME=$(whoami)
      4 SCRIPT_NAME="${USER_NAME}-task2"
      5
      6 VERSION="1.0"
      7
      8 # Функція для відображення довідки
      9 function show_help() {
     10     echo "Usage: "
     11     echo "  ${SCRIPT_NAME} [--help | --version] | [[-q|--qа] файл_із_cist.csv]"
     12     echo "
     13 Options:"
     14     echo "  --help       Показати цю довідку і завершити р
     15     echo "  --version    Вивести версію скрипта і завершит
     16     echo "  -q, --quiet  Не виводити інформацію в стандартя"
     17 }
     18
     19 # Функція для відображення версії
     20 function show_version() {
     21     echo "${SCRIPT_NAME} version ${VERSION}"
     22 }
     23
     24 # Обробка аргументів командного рядка
     25 if [[ "$1" == "--help" ]]; then
     26     show_help
     27     exit 0
     28 elif [[ "$1" == "--version" ]]; then
     29     show_version
     30     exit 0
     31 fi
     32
     33 QUIET=false
     34 if [[ "$1" == "-q" || "$1" == "--quiet" ]]; then
     35     QUIET=true
     36     shift
     37 fi
     38
     39 GROUP_NAME=$1
     40 CSV_FILE=$2
     41
     42 # Вибір CSV-файлу
     43 if [ -z "$CSV_FILE" ]; then
     44     echo "Виберіть CSV-файл із розкладом:"
     45     select CSV_FILE in $(ls TimeTable_??_??_20??.csv 2> /do
     46         if [[ -n "$CSV_FILE" ]]; then
     47             break
     48         fi
     49     done
     50 fi
     51
     52 # Перевірка доступності файлу
     53 if [ ! -f "$CSV_FILE" ] || [ ! -r "$CSV_FILE" ]; then
     54     echo "Помилка: Файл '$CSV_FILE' не знайдено або він не
     55     exit 1
     56 fi
     57
     58 # Конвертація у UTF-8
     59 TEMP_FILE="Temp_${CSV_FILE}"
     60 if ! iconv -f WINDOWS-1251 -t UTF-8 "$CSV_FILE" | tr '\r'  {print}' | sort -t',' -k1,1 -k2.8,2.11n -k2.5,2.6n -k2.2,2.3n3.6n > "$TEMP_FILE"; then
     61     echo "Помилка: Не вдалось обробити файл '$CSV_FILE'" >
     62     exit 1
     63 fi
     64
     65 GROUP_LIST=($(
     66     awk -F' ' '$2 ~ /-/ {gsub(/"/, "", $1); print $1}' "$T
     67 ))
     68
     69 # Вибір групи, якщо не задано
     70 if [ -z "$GROUP_NAME" ]; then
     71     if [ "${#GROUP_LIST[@]}" -le 1 ]; then
     72         GROUP_NAME="${GROUP_LIST[0]}"
     73         echo "Автоматично обрано групу"
     74     else
     75         echo "Виберіть академічну групу:"
     76         select GROUP_NAME in "${GROUP_LIST[@]}"; do
     77             if [ -n "$GROUP_NAME" ]; then
     78                 break
     79             fi
     80         done
     81     fi
     82 fi
     83
     84 # Перевірка наявності групи у файлі
     85 if ! grep -q "$GROUP_NAME" "$TEMP_FILE"; then
     86     echo "Групу '$GROUP_NAME' не знайдено у файлі '$CSV_FI
     87
     88     if [ "${#GROUP_LIST[@]}" -le 1 ]; then
     89         GROUP_NAME="${GROUP_LIST[0]}"
     90         echo "Автоматично обрано групу"
     91     else
     92         echo "Виберіть академічну групу:"
     93         select GROUP_NAME in "${GROUP_LIST[@]}"; do
     94             if [ -n "$GROUP_NAME" ]; then
     95                 break
     96             fi
     97         done
     98     fi
     99 fi
    100
    101 # Обробка CSV-файлу та форматування
    102 OUT_FILE="Google_$(echo "$CSV_FILE")"
    103 AWK_SCRIPT='
    104 BEGIN {
    105     OFS = ",";
    106     print "Subject,Start Date,Start Time,End Date,End Time
    107 }
    108 $1 ~ ("^\"" group) {
    109     for (i = 1; i <= NF; i++) gsub(/"/, "", $i)
    110
    111     gsub(group " - ", "", $1)
    112
    113     split($2, sdate, ".")
    114     split($4, edate, ".")
    115     startDate = sdate[2] "/" sdate[1] "/" sdate[3]
    116     endDate = edate[2] "/" edate[1] "/" edate[3]
    117
    118     split($3, stime, ":")
    119     split($5, etime, ":")
    120
    121     shour = stime[1] + 0
    122     ehour = etime[1] + 0
    123
    124     sformat = (shour < 12) ? "AM" : "PM"
    125     eformat = (ehour < 12) ? "AM" : "PM"
    126
    127     shour = (shour % 12 == 0) ? 12 : shour % 12
    128     ehour = (ehour % 12 == 0) ? 12 : ehour % 12
    129
    130     startTime = sprintf("%02d:%s %s", shour, stime[2], sfo
    131     endTime = sprintf("%02d:%s %s", ehour, etime[2], eform
    132
    133     split($1, parts, " ")
    134     key = parts[1] " " parts[2]
    135
    136     if ($1 ~ / Лб/) {
    137         if (!(key in labtemp)) {
    138             labtemp[key] = 1
    139             count[key] = 1
    140         } else {
    141             labtemp[key]++
    142             if (labtemp[key] > 2) {
    143                 labtemp[key] = 1
    144                 count[key]++
    145             }
    146         }
    147     } else {
    148         if (!(key in count)) count[key] = 1
    149         else count[key]++
    150     }
    151
    152     subject = "\"" $1 "; №" count[key] "\""
    153
    154     print subject, startDate, startTime, endDate, endTime,
    155 }'
    156
    157 if $QUIET; then
    158     OUTPUT=$(awk -F'",' -v group="$GROUP_NAME" "$AWK_SCRIP
    159     STATUS=$?
    160     echo "$OUTPUT" > "$OUT_FILE"
    161 else
    162     OUTPUT=$(awk -F'",' -v group="$GROUP_NAME" "$AWK_SCRIP
    163     STATUS=$?
    164     echo "$OUTPUT" | tee "$OUT_FILE"
    165 fi
    166
    167 rm -f "$TEMP_FILE"
    168
    169 if [ "$STATUS" -ne 0 ]; then
    170     echo "Помилка: Невдала обробка файла" >&2
    171     exit 1
    172 fi
    173
    174 echo "Готовий файл: $OUT_FILE"
    175
    176 exit 0
2


